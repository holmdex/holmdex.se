name: Biannual Market Patterns Report

on:
  schedule:
    - cron: '0 0 1 1,7 *'  # Run on January 1st and July 1st
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Explicitly grant write permission to repository contents

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    env:
      R_LIBS_USER: ${{ github.workspace }}/r-libs
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      TZ: UTC
      R_CHECK_SYSTEM_CLOCK_: FALSE
      NOT_CRAN: true
      # Increase memory limits for R
      R_MAX_VSIZE: 16Gb
      R_MAX_NUM_THREADS: 4
      # Prevent R from stopping on warnings
      R_KEEP_PKG_SOURCE: yes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Using v4 for better performance
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Clean previous reports
        run: |
          rm -f weekday-market-patterns.html market-patterns-report-*.html 
          rm -f global_market_data_cache_*.rds
          rm -f .Rhistory .RData
          mkdir -p data
      
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true
      
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.3.450
      
      - name: Get Date
        id: get-date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libfontconfig1-dev libfreetype6-dev \
            libharfbuzz-dev libfribidi-dev \
            libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
            pkg-config libv8-dev
          
          # Install Chrome dependencies for plotly HTML export
          sudo apt-get install -y --no-install-recommends \
            libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 \
            libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 \
            libxrandr2 libgbm1 libasound2
      
      - name: Setup R package directories
        run: mkdir -p ${{ env.R_LIBS_USER }}
      
      - name: Cache R packages
        uses: actions/cache@v3
        id: r-pkg-cache
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-pkg-${{ hashFiles('weekday-market-patterns.qmd') }}-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-r-pkg-${{ hashFiles('weekday-market-patterns.qmd') }}-
            ${{ runner.os }}-r-pkg-
      
      - name: Install core R packages
        run: |
          # Install basic packages needed for package installation
          Rscript -e 'install.packages(c("remotes", "pak"), repos = "https://cloud.r-project.org")'
          
          # Set repository mirror with binary packages
          Rscript -e 'options(repos = c(CRAN = "https://packagemanager.posit.co/cran/__linux__/jammy/latest"))'
          
          # Install tidyverse with proper error handling
          Rscript -e '
          tryCatch({
            install.packages("tidyverse")
            cat("Successfully installed tidyverse\n")
          }, error = function(e) {
            cat("Error installing tidyverse:", e$message, "\n")
            cat("Trying individual tidyverse components instead\n")
            # Try installing individual components
            install.packages(c("ggplot2", "dplyr", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats"))
          })'
      
      - name: Install additional packages
        run: |
          # Install plotting and other essential packages
          Rscript -e '
          packages <- c(
            "lubridate", "plotly", "knitr", "rmarkdown", "jsonlite", 
            "httr", "rvest", "xml2", "curl", "DT", "quantmod", 
            "tidyquant", "htmlwidgets", "htmltools", "scales"
          )
          
          # Install each package separately to avoid dependency issues
          for (pkg in packages) {
            tryCatch({
              if (!requireNamespace(pkg, quietly = TRUE)) {
                cat("Installing", pkg, "...\n")
                install.packages(pkg)
                cat("Successfully installed", pkg, "\n")
              } else {
                cat(pkg, "is already installed\n")
              }
            }, error = function(e) {
              cat("Error installing", pkg, ":", e$message, "\n")
              cat("Continuing with other packages\n")
            })
          }
          
          # Try to install TTR separately as it sometimes has issues
          tryCatch({
            if (!requireNamespace("TTR", quietly = TRUE)) {
              cat("Installing TTR...\n")
              install.packages("TTR")
              cat("Successfully installed TTR\n")
            } else {
              cat("TTR is already installed\n")
            }
          }, error = function(e) {
            cat("Error installing TTR:", e$message, "\n")
          })'
      
      - name: Set git config
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Create .Rprofile for namespace handling
        run: |
          cat > .Rprofile << 'EOF'
          # Suppress startup messages
          options(tidyverse.quiet = TRUE)
          suppressMessages(library(dplyr))
          
          # Set explicit function preferences to avoid namespace conflicts
          assign("filter", dplyr::filter, envir = .GlobalEnv)
          assign("select", dplyr::select, envir = .GlobalEnv)
          assign("group_by", dplyr::group_by, envir = .GlobalEnv)
          assign("summarize", dplyr::summarize, envir = .GlobalEnv)
          assign("summarise", dplyr::summarise, envir = .GlobalEnv)
          assign("mutate", dplyr::mutate, envir = .GlobalEnv)
          assign("arrange", dplyr::arrange, envir = .GlobalEnv)
          
          # Set additional options
          options(
            width = 120,
            scipen = 999,
            max.print = 1000,
            warn = 1,
            repos = c(CRAN = "https://cloud.r-project.org")
          )
          EOF
      
      - name: Patch QMD file if needed
        run: |
          # Check if QMD file needs patching for common issues
          if grep -q "filter <- dplyr::filter" weekday-market-patterns.qmd; then
            echo "QMD file already contains function assignments, no need to patch"
          else
            # Make a backup
            cp weekday-market-patterns.qmd weekday-market-patterns.qmd.bak
            
            # Add function assignments to setup chunk if needed
            sed -i '/```{r setup, include=FALSE}/a \
            # Explicitly set dplyr functions to avoid namespace conflicts\
            filter <- dplyr::filter\
            select <- dplyr::select\
            group_by <- dplyr::group_by\
            summarize <- dplyr::summarize\
            mutate <- dplyr::mutate\
            arrange <- dplyr::arrange' weekday-market-patterns.qmd
            
            echo "Patched QMD file with function assignments"
          fi
      
      - name: Create fallback HTML template
        run: |
          # Create a simple HTML fallback in case Quarto fails
          cat > fallback.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Market Patterns Report</title>
            <style>
              body { font-family: sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #0A2540; }
              p { line-height: 1.6; }
              .message { background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; }
            </style>
          </head>
          <body>
            <h1>Weekday Market Patterns Report</h1>
            <div class="message">
              <p>The automated report generation encountered issues. Please check the GitHub Actions workflow for details.</p>
              <p>This is a placeholder file until the report can be properly generated. Please try running the workflow again manually.</p>
            </div>
            <p>Generated on: $(date)</p>
          </body>
          </html>
          EOF
      
      - name: Verify directory structure
        run: |
          # Make sure any directories needed by the qmd exist
          mkdir -p figures
          mkdir -p data
          ls -la
      
      - name: Try Quarto render with max compatibility
        run: |
          # Try rendering with maximum compatibility settings
          echo "Attempting to render with Quarto..."
          
          # Try full render first
          quarto render weekday-market-patterns.qmd --to html || echo "Full render failed, will try fallback approaches"
          
          # Check if output was generated
          if [ ! -f weekday-market-patterns.html ]; then
            echo "First attempt failed, trying fallback approaches..."
            
            # Try minimal render with disabled caching
            echo "Trying minimal render..."
            quarto render weekday-market-patterns.qmd --to html --no-cache || echo "Minimal render failed"
            
            # If still no luck, try running R directly
            if [ ! -f weekday-market-patterns.html ]; then
              echo "Trying direct R rendering..."
              Rscript -e 'rmarkdown::render("weekday-market-patterns.qmd", output_format = "html_document")' || echo "Direct rendering failed"
            fi
          fi
      
      - name: Check for output and use fallback if needed
        run: |
          if [ -f weekday-market-patterns.html ]; then
            echo "Successfully generated HTML output"
          else
            echo "WARNING: Failed to generate report, using fallback template"
            cp fallback.html weekday-market-patterns.html
          fi
      
      - name: Create dated report copy
        run: cp weekday-market-patterns.html "market-patterns-report-$(date +'%Y-%m-%d').html"
      
      - name: Optimize HTML file
        run: |
          # Install html-minifier with error handling
          sudo npm install -g html-minifier || echo "Failed to install html-minifier, skipping optimization"
          
          # Try to optimize if minifier was installed
          if command -v html-minifier > /dev/null; then
            html-minifier --collapse-whitespace --remove-comments --remove-optional-tags \
              --remove-redundant-attributes --remove-script-type-attributes \
              --remove-tag-whitespace --use-short-doctype \
              weekday-market-patterns.html -o weekday-market-patterns.min.html || echo "Minification failed"
            
            if [ -f weekday-market-patterns.min.html ] && [ -s weekday-market-patterns.min.html ]; then
              mv weekday-market-patterns.min.html weekday-market-patterns.html
            fi
          else
            echo "Skipping HTML optimization"
          fi
      
      - name: Deploy report files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update market patterns report [automated] ${{ steps.get-date.outputs.date }}"
          file_pattern: "weekday-market-patterns.html market-patterns-report-*.html"
          commit_user_name: GitHub Actions
          commit_user_email: actions@github.com
          commit_author: GitHub Actions <actions@github.com>
          push_options: '--force'
          skip_dirty_check: true
