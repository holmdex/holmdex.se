name: Biannual Market Patterns Report

on:
  schedule:
    - cron: '0 0 1 1,7 *'  # Run on January 1st and July 1st
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Explicitly grant write permission to repository contents

jobs:
  generate-report:
    runs-on: ubuntu-latest  # Will use Ubuntu 24.04 as of January 2025
    
    env:
      R_LIBS_USER: ${{ github.workspace }}/r-libs
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      TZ: UTC
      R_CHECK_SYSTEM_CLOCK_: FALSE
      NOT_CRAN: true
      # Increase memory limits for R
      R_MAX_VSIZE: 32Gb
      R_MAX_NUM_THREADS: 4
      # Prevent R from stopping on warnings
      R_KEEP_PKG_SOURCE: yes
      # Set a longer timeout for downloads
      DOWNLOAD_TIMEOUT: 1200
      # Set retries for URL fetching
      R_MAX_RETRIES: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Using v4 for better performance
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Create data directory and set cache keys
        run: |
          # Create data directory if it doesn't exist
          mkdir -p data
          # Create timestamp variables for cache keys
          echo "CACHE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "CACHE_WEEK=$(date +'%Y_%W')" >> $GITHUB_ENV
          echo "CACHE_MONTH=$(date +'%Y_%m')" >> $GITHUB_ENV
          
          # Print Ubuntu version for debugging
          lsb_release -a || cat /etc/os-release
      
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true
      
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.3.450
      
      - name: Get Date
        id: get-date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Install system dependencies
        run: |
          # Update package lists
          sudo apt-get update
          
          # Install general development libraries
          sudo apt-get install -y --no-install-recommends \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libfontconfig1-dev libfreetype6-dev \
            libharfbuzz-dev libfribidi-dev \
            libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
            pkg-config libv8-dev libsodium-dev
          
          # Install Chrome/plotting dependencies
          sudo apt-get install -y --no-install-recommends \
            libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 \
            libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 \
            libxrandr2 libgbm1 libpulse0 libasound2
          
          # Handle t64 variants if on Ubuntu 24.04
          if grep -q "Noble" /etc/os-release; then
            echo "Installing t64 variants for Ubuntu 24.04"
            sudo apt-get install -y --no-install-recommends \
              libatk1.0-0t64 libatk-bridge2.0-0t64 libcups2t64 libasound2t64 || true
          fi
      
      - name: Setup R package directories
        run: mkdir -p ${{ env.R_LIBS_USER }}
      
      - name: Cache R packages
        uses: actions/cache@v3
        id: r-pkg-cache
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-pkg-${{ hashFiles('weekday-market-patterns.qmd') }}-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-r-pkg-${{ hashFiles('weekday-market-patterns.qmd') }}-
            ${{ runner.os }}-r-pkg-
      
      - name: Cache market data
        uses: actions/cache@v3
        id: market-data-cache
        with:
          path: data/
          key: market-data-${{ env.CACHE_DATE }}
          restore-keys: |
            market-data-${{ env.CACHE_WEEK }}-
            market-data-${{ env.CACHE_MONTH }}-
            market-data-
      
      - name: Install core R packages
        run: |
          # Set longer timeout for installations
          Rscript -e 'options(timeout = 1200)'
          
          # Install basic packages needed for package installation
          Rscript -e 'install.packages(c("remotes", "pak"), repos = "https://cloud.r-project.org")'
          
          # Set repository mirror with binary packages
          Rscript -e '
          os_name <- if(file.exists("/etc/os-release")) {
            system("grep -oP \'(?<=^ID=).+\' /etc/os-release", intern=TRUE)
          } else {
            "ubuntu"
          }
          
          ubuntu_version <- if(file.exists("/etc/os-release")) {
            system("grep -oP \'(?<=^VERSION_CODENAME=).+\' /etc/os-release", intern=TRUE)
          } else {
            "jammy"
          }
          
          # Default to jammy if we couldn\'t detect
          if(length(ubuntu_version) == 0 || ubuntu_version == "") {
            ubuntu_version <- "jammy"
          }
          
          # Use the correct repository URL based on Ubuntu version
          repos_url <- paste0("https://packagemanager.posit.co/cran/__linux__/", 
                              ubuntu_version, "/latest")
          
          print(paste0("Setting repository to: ", repos_url))
          options(repos = c(CRAN = repos_url))
          '
          
          # Install tidyverse with proper error handling
          Rscript -e '
          tryCatch({
            install.packages("tidyverse")
            cat("Successfully installed tidyverse\n")
          }, error = function(e) {
            cat("Error installing tidyverse:", e$message, "\n")
            cat("Trying individual tidyverse components instead\n")
            # Try installing individual components
            install.packages(c("ggplot2", "dplyr", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats"))
          })'
      
      - name: Install additional packages
        run: |
          # Install plotting and other essential packages
          Rscript -e '
          # Set longer timeout
          options(timeout = 1200)
          
          # Verify repository settings
          cat("Using CRAN repositories:", getOption("repos"), "\n")
          
          packages <- c(
            "lubridate", "plotly", "knitr", "rmarkdown", "jsonlite", 
            "httr", "rvest", "xml2", "curl", "DT", "quantmod", 
            "tidyquant", "htmlwidgets", "htmltools", "scales", "RCurl"
          )
          
          # Install each package separately to avoid dependency issues
          for (pkg in packages) {
            tryCatch({
              if (!requireNamespace(pkg, quietly = TRUE)) {
                cat("Installing", pkg, "...\n")
                install.packages(pkg)
                cat("Successfully installed", pkg, "\n")
              } else {
                cat(pkg, "is already installed\n")
              }
            }, error = function(e) {
              cat("Error installing", pkg, ":", e$message, "\n")
              cat("Continuing with other packages\n")
            })
          }
          
          # Try to install TTR separately as it sometimes has issues
          tryCatch({
            if (!requireNamespace("TTR", quietly = TRUE)) {
              cat("Installing TTR...\n")
              install.packages("TTR")
              cat("Successfully installed TTR\n")
            } else {
              cat("TTR is already installed\n")
            }
          }, error = function(e) {
            cat("Error installing TTR:", e$message, "\n")
          })'
      
      - name: Set git config
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Create .Rprofile for namespace handling
        run: |
          cat > .Rprofile << 'EOF'
          # Suppress startup messages
          options(tidyverse.quiet = TRUE)
          
          # Set explicit function preferences to avoid namespace conflicts
          assign("filter", dplyr::filter, envir = .GlobalEnv)
          assign("select", dplyr::select, envir = .GlobalEnv)
          assign("group_by", dplyr::group_by, envir = .GlobalEnv)
          assign("summarize", dplyr::summarize, envir = .GlobalEnv)
          assign("summarise", dplyr::summarise, envir = .GlobalEnv)
          assign("mutate", dplyr::mutate, envir = .GlobalEnv)
          assign("arrange", dplyr::arrange, envir = .GlobalEnv)
          
          # Set additional options
          options(
            width = 120,
            scipen = 999,
            max.print = 1000,
            warn = 1,
            # Increase download timeout
            timeout = 1200,
            # Set max retries for URL fetching
            HTTPUserAgent = paste0(
              "R/", getRversion(), 
              " R (", R.version$platform, ")",
              " Biannual-Market-Patterns-Report"
            )
          )
          
          # Configure quantmod/Yahoo requests for reliability
          if(requireNamespace("quantmod", quietly = TRUE)) {
            quantmod::setDefaults(getSymbols.yahoo, verbose = TRUE)
          }
          
          # Make sure we have httr
          if(requireNamespace("httr", quietly = TRUE)) {
            # Set large config for retries
            httr::set_config(httr::config(
              connecttimeout = 60,
              timeout = 300,
              ssl_verifypeer = FALSE
            ))
          }
          EOF
      
      - name: Create cache initializer script
        run: |
          cat > initialize_cache.R << 'EOF'
          # Enhanced market data cache handler
          library(tidyverse)
          library(quantmod)
          library(lubridate)
          
          # Create data directory if it doesn't exist
          if (!dir.exists("data")) {
            dir.create("data", showWarnings = FALSE)
          }
          
          # Define cache file paths
          cache_file <- file.path("data", "global_market_data_cache_5yr.rds")
          cache_file_weekly <- file.path("data", paste0("global_market_data_cache_5yr_", format(Sys.Date(), "%Y_%W"), ".rds"))
          cache_file_daily <- file.path("data", paste0("global_market_data_cache_5yr_", format(Sys.Date(), "%Y_%m_%d"), ".rds"))
          
          # Function to safely read cache files
          safe_read_cache <- function(file_path) {
            tryCatch({
              if (file.exists(file_path)) {
                message(paste("Attempting to load cache from:", file_path))
                data <- readRDS(file_path)
                
                # Basic validation
                if (is.data.frame(data) && nrow(data) > 0 && 
                    all(c("date", "symbol", "close") %in% colnames(data))) {
                  message(paste("Successfully loaded cache with", nrow(data), "rows from", file_path))
                  return(data)
                } else {
                  message("Cache data structure is invalid or empty")
                }
              }
              return(NULL)
            }, error = function(e) {
              message(paste("Error reading cache file:", e$message))
              return(NULL)
            })
          }
          
          # Function to safely save cache
          safe_save_cache <- function(data, file_path) {
            tryCatch({
              # Create directory if needed
              dir.create(dirname(file_path), showWarnings = FALSE, recursive = TRUE)
              
              # Save data
              saveRDS(data, file_path)
              message(paste("Successfully saved cache to:", file_path))
              return(TRUE)
            }, error = function(e) {
              message(paste("Failed to save cache to:", file_path, "-", e$message))
              return(FALSE)
            })
          }
          
          # Try to load existing cache
          market_data <- NULL
          
          # Try to load from cache files in order of recency
          if(is.null(market_data)) {
            market_data <- safe_read_cache(cache_file_daily)
          }
          
          if(is.null(market_data)) {
            market_data <- safe_read_cache(cache_file_weekly)
          }
          
          if(is.null(market_data)) {
            market_data <- safe_read_cache(cache_file)
          }
          
          # If no cache, try to initialize with S&P 500 data
          if(is.null(market_data)) {
            message("No cache found. Initializing with S&P 500 data...")
            
            # Try each of these symbols for S&P 500
            symbols <- c("^GSPC", "SPY", "SP500.US", "ES=F", "INX")
            sp500_data <- NULL
            
            # Try with multiple methods to maximize chance of success
            for(method in c("yahoo", "av", "tiingo", "alphavantager")) {
              if (!is.null(sp500_data)) break
              
              for(symbol in symbols) {
                tryCatch({
                  message(paste("Trying to fetch", symbol, "with method", method))
                  
                  # Custom user agent and timeout
                  options(
                    HTTPUserAgent = paste0(
                      "R/", getRversion(), 
                      " R (", R.version$platform, ")",
                      " Market-Patterns-Report/1.0"
                    ),
                    timeout = 300
                  )
                  
                  if (method == "yahoo") {
                    # Use quantmod
                    ticker <- getSymbols(symbol, src = "yahoo", 
                                      from = Sys.Date() - years(5),
                                      to = Sys.Date(),
                                      auto.assign = FALSE)
                    
                    if (!is.null(ticker) && nrow(ticker) > 0) {
                      message(paste("Successfully fetched", symbol, "with Yahoo"))
                      sp500_data <- data.frame(date = index(ticker), coredata(ticker))
                      colnames(sp500_data) <- c("date", "open", "high", "low", "close", "volume", "adjusted")
                      sp500_data$symbol <- symbol
                      sp500_data$region <- "North America"
                      sp500_data$index_name <- "🇺🇸 S&P 500"
                      sp500_data$canonical_index <- "S&P 500"
                      break
                    }
                  } else if (method == "av" && requireNamespace("tidyquant", quietly = TRUE)) {
                    # Try with Alpha Vantage
                    ticker_data <- tidyquant::tq_get(symbol, get = "alphavantager", 
                                                 from = Sys.Date() - years(5),
                                                 to = Sys.Date())
                    
                    if (!is.null(ticker_data) && nrow(ticker_data) > 0) {
                      message(paste("Successfully fetched", symbol, "with Alpha Vantage"))
                      # Rename columns to match expected format
                      sp500_data <- ticker_data %>%
                        rename(date = timestamp, adjusted = adjusted_close) %>%
                        mutate(
                          symbol = symbol,
                          region = "North America",
                          index_name = "🇺🇸 S&P 500",
                          canonical_index = "S&P 500"
                        )
                      break
                    }
                  } else if (method == "tiingo" && requireNamespace("tidyquant", quietly = TRUE)) {
                    # Try with Tiingo
                    ticker_data <- tidyquant::tq_get(symbol, get = "tiingo", 
                                                 from = Sys.Date() - years(5),
                                                 to = Sys.Date())
                    
                    if (!is.null(ticker_data) && nrow(ticker_data) > 0) {
                      message(paste("Successfully fetched", symbol, "with Tiingo"))
                      # Rename columns to match expected format
                      sp500_data <- ticker_data %>%
                        rename(date = date, adjusted = adjClose, close = close, open = open, high = high, low = low) %>%
                        mutate(
                          symbol = symbol,
                          region = "North America",
                          index_name = "🇺🇸 S&P 500",
                          canonical_index = "S&P 500"
                        )
                      break
                    }
                  }
                }, error = function(e) {
                  message(paste("Error fetching", symbol, "with method", method, ":", e$message))
                })
                
                # If we got data, break out of the symbol loop
                if (!is.null(sp500_data)) break
              }
              
              # If we got data, break out of the method loop
              if (!is.null(sp500_data)) break
            }
            
            # If we got data, save it to cache
            if (!is.null(sp500_data) && nrow(sp500_data) > 0) {
              message(paste("Successfully fetched basic S&P 500 data with", nrow(sp500_data), "rows"))
              
              # Prepare the data with basic calculations needed for the qmd
              if (all(c("date", "close") %in% colnames(sp500_data))) {
                sp500_data <- sp500_data %>%
                  arrange(date) %>%
                  mutate(
                    weekday_full = weekdays(date),
                    weekday = factor(weekdays(date, TRUE), levels = c("Mon", "Tue", "Wed", "Thu", "Fri")),
                    year = year(date),
                    month = month(date)
                  ) %>%
                  group_by(symbol) %>%
                  mutate(
                    daily_return = (close / lag(close) - 1) * 100,
                    winsorized_return = daily_return  # Simple version for initial data
                  ) %>%
                  ungroup() %>%
                  filter(!is.na(daily_return))
                
                # Save to cache files
                safe_save_cache(sp500_data, cache_file)
                safe_save_cache(sp500_data, cache_file_weekly)
                safe_save_cache(sp500_data, cache_file_daily)
                
                # Set to market_data for use in the RMD
                market_data <- sp500_data
                
                message("Successfully saved S&P 500 data to cache files")
              } else {
                message("SP500 data is missing required columns")
              }
            } else {
              message("Failed to fetch S&P 500 data")
            }
          }
          
          # Check if we have market data
          if (!is.null(market_data)) {
            message("Market data is available with", nrow(market_data), "rows")
            message("Column names:", paste(colnames(market_data), collapse=", "))
            message("Date range:", paste(range(market_data$date), collapse=" to "))
            message("Unique symbols:", paste(unique(market_data$symbol), collapse=", "))
          } else {
            message("WARNING: No market data available after all attempts")
          }
          EOF
      
      - name: Initialize market data cache
        run: |
          echo "Initializing market data cache..."
          Rscript initialize_cache.R
          
          # Print cache files
          echo "Cache files:"
          find data/ -name "*.rds" -ls || echo "No RDS files found"
      
      - name: Check for required data
        run: |
          # Check if cache files exist
          if ls data/*.rds 2>/dev/null; then
            echo "Cache files exist"
            # Check the content of the cache files
            Rscript -e '
            cache_files <- list.files("data", pattern = "\\.rds$", full.names = TRUE)
            for (file in cache_files) {
              tryCatch({
                data <- readRDS(file)
                cat("File", file, "contains", nrow(data), "rows\n")
                cat("Column names:", paste(colnames(data), collapse=", "), "\n")
                cat("Date range:", paste(range(data$date), collapse=" to "), "\n")
                cat("Regions:", paste(unique(data$region), collapse=", "), "\n")
              }, error = function(e) {
                cat("Error reading", file, ":", e$message, "\n")
              })
            }
            '
          else
            echo "WARNING: No cache files found, rendering may fail"
          fi
      
      - name: Render with Quarto
        run: |
          # Try with different approaches to maximize chance of success
          echo "Attempting to render with Quarto..."
          
          # Try full render first
          if quarto render weekday-market-patterns.qmd --to html; then
            echo "Successfully rendered with Quarto"
          else
            echo "Failed to render with Quarto, trying with different parameters..."
            
            # Try minimal render with disabled caching
            if quarto render weekday-market-patterns.qmd --to html --no-cache; then
              echo "Successfully rendered with Quarto (no cache)"
            else
              echo "Failed with Quarto, trying direct R rendering..."
              
              # Try direct R rendering as fallback
              Rscript -e 'rmarkdown::render("weekday-market-patterns.qmd", output_format = "html_document")'
            fi
          fi
      
      - name: Create dated report copy
        run: |
          if [ -f weekday-market-patterns.html ]; then
            cp weekday-market-patterns.html "market-patterns-report-$(date +'%Y-%m-%d').html"
            echo "Created dated copy of the report"
          else
            echo "ERROR: No HTML file was generated"
            exit 1
          fi
      
      - name: Optimize HTML file
        run: |
          # Install html-minifier with error handling
          sudo npm install -g html-minifier || echo "Failed to install html-minifier, skipping optimization"
          
          # Try to optimize if minifier was installed
          if command -v html-minifier > /dev/null; then
            html-minifier --collapse-whitespace --remove-comments --remove-optional-tags \
              --remove-redundant-attributes --remove-script-type-attributes \
              --remove-tag-whitespace --use-short-doctype \
              weekday-market-patterns.html -o weekday-market-patterns.min.html || echo "Minification failed"
            
            if [ -f weekday-market-patterns.min.html ] && [ -s weekday-market-patterns.min.html ]; then
              mv weekday-market-patterns.min.html weekday-market-patterns.html
            fi
          else
            echo "Skipping HTML optimization"
          fi
      
      - name: Deploy report files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update market patterns report [automated] ${{ steps.get-date.outputs.date }}"
          file_pattern: "weekday-market-patterns.html market-patterns-report-*.html data/*.rds"
          commit_user_name: GitHub Actions
          commit_user_email: actions@github.com
          commit_author: GitHub Actions <actions@github.com>
          push_options: '--force'
          skip_dirty_check: true
