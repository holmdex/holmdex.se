name: Biannual Market Patterns Report

on:
  schedule:
    - cron: '0 2 1 1,7 *'  # Runs Jan 1 and July 1 at 02:00 UTC
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all packages'
        required: false
        default: false
        type: boolean
      data_days:
        description: 'Number of days of market data to analyze'
        required: false
        default: '1826'  # 5 years
        type: string

permissions:
  contents: write
  packages: read

env:
  R_VERSION: '4.4.0'  # Latest stable as of July 2024
  QUARTO_VERSION: '1.7.30'
  R_LIBS_USER: ${{ github.workspace }}/r-libs
  CRAN_MIRROR: 'https://cloud.r-project.org'
  ALT_CRAN_MIRROR: 'https://cran.rstudio.com'
  TZ: UTC
  LC_ALL: en_US.UTF-8
  R_MAX_VSIZE: 8Gb
  R_MAX_NUM_THREADS: 4
  R_KEEP_PKG_SOURCE: yes
  DOWNLOAD_TIMEOUT: 600
  # Ubuntu 22.04 current versions (jammy)
  UBUNTU_CODENAME: 'jammy'

jobs:
  generate-report:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu-22.04, r: 'release'}

    steps:
      # ====================
      # 1. SYSTEM SETUP
      # ====================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Disable problematic services
        run: |
          sudo systemctl mask packagekit.service || true
          sudo systemctl mask php*-fpm.service || true
          sudo systemctl daemon-reload

      - name: Setup system environment
        run: |
          echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          mkdir -p data/{cache,archive,figures}
          mkdir -p ${{ env.R_LIBS_USER }}
          
          # Verify system
          lsb_release -a
          df -h
          ulimit -a

      # ==================
      # 2. DEPENDENCIES
      # ==================
      - name: Update package sources
        run: |
          sudo apt-get update -y
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y universe
          sudo apt-get update -y

      - name: Install system dependencies (current versions)
        run: |
          # Get current versions from Ubuntu's package database
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libgdal-dev \
            libgeos-dev \
            libproj-dev \
            libudunits2-dev \
            libv8-dev \
            locales \
            ca-certificates

          # Verify installations
          dpkg -l | grep -E 'libcurl|libssl|libxml2|libfontconfig'

          # Configure locales
          sudo locale-gen en_US.UTF-8

      # ==================
      # 3. R & QUARTO SETUP
      # ==================
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ env.R_VERSION }}
          use-public-rspm: false

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup Quarto (with fallback)
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ env.QUARTO_VERSION }}
          fallback-to-url: true

      # ==================
      # 4. LIBRARY CONFIG
      # ==================
      - name: Configure R environment
        run: |
          # Create isolated library path
          mkdir -p ${{ env.R_LIBS_USER }}-isolated
          echo "R_LIBS_USER=${{ env.R_LIBS_USER }}-isolated" >> $GITHUB_ENV
          
          # Configure .Rprofile
          cat > .Rprofile << 'EOF'
          options(
            repos = c(CRAN = Sys.getenv("CRAN_MIRROR")),
            Ncpus = as.numeric(Sys.getenv("R_MAX_NUM_THREADS")),
            download.file.method = "libcurl",
            timeout = as.numeric(Sys.getenv("DOWNLOAD_TIMEOUT")),
            install.packages.compile.from.source = "never"
          )
          
          # GLIBC compatibility check
          if (Sys.info()["sysname"] == "Linux") {
            glibc_version <- system("ldd --version | head -1", intern = TRUE)
            message("GLIBC version: ", glibc_version)
          }
          EOF

          # Configure Makevars for compilation
          mkdir -p ~/.R
          echo "MAKEFLAGS = -j$(nproc)" > ~/.R/Makevars
          echo "CXXFLAGS += -O2 -march=native" >> ~/.R/Makevars

      # ==================
      # 5. PACKAGE INSTALL
      # ==================
      - name: Install R packages (with robust fallbacks)
        run: |
          Rscript -e '
          # Function to install with multiple fallbacks
          safe_install <- function(pkgs) {
            repos <- c(
              CRAN = Sys.getenv("CRAN_MIRROR"),
              RSPM = "https://packagemanager.posit.co/cran/latest",
              BERKELEY = "https://cloud.r-project.org"
            )
            
            for (repo in names(repos)) {
              tryCatch({
                message("Attempting install from: ", repo)
                install.packages(
                  pkgs,
                  repos = repos[repo],
                  dependencies = TRUE,
                  quiet = FALSE,
                  INSTALL_opts = "--no-multiarch"
                )
                if (all(sapply(pkgs, requireNamespace, quietly = TRUE))) {
                  message("Successfully installed from: ", repo)
                  return(TRUE)
                }
              }, error = function(e) {
                message("Failed with ", repo, ": ", conditionMessage(e))
              })
            }
            stop("Failed to install: ", paste(pkgs, collapse = ", "))
          }
          
          # Core packages
          safe_install(c("dplyr", "remotes", "pak"))
          
          # Verify critical packages
          if (!requireNamespace("dplyr", quietly = TRUE)) {
            message("Falling back to GitHub installation")
            remotes::install_github("tidyverse/dplyr")
          }
          '

      - name: Install report dependencies
        run: |
          Rscript -e '
          report_pkgs <- c(
            "quantmod", "tidyquant", "plotly", "DT",
            "lubridate", "httr", "rvest", "TTR"
          )
          
          if (requireNamespace("pak", quietly = TRUE)) {
            pak::pkg_install(report_pkgs, ask = FALSE)
          } else {
            install.packages(report_pkgs)
          }
          '

      # ==================
      # 6. REPORT GENERATION
      # ==================
      - name: Render Quarto document
        run: |
          DATA_DAYS="${{ github.event.inputs.data_days || '1826' }}"
          
          quarto render weekday-market-patterns.qmd \
            --to html \
            --execute-params "days:$DATA_DAYS" \
            --output-dir reports \
            --cache \
            --fail-on-warning

      # ==================
      # 7. OUTPUT VALIDATION
      # ==================
      - name: Validate output
        run: |
          if [ ! -f reports/weekday-market-patterns.html ]; then
            echo "::error::Report file not generated!"
            exit 1
          fi
          
          # Basic content validation
          if ! grep -q "<html" reports/weekday-market-patterns.html; then
            echo "::error::Invalid HTML output!"
            exit 1
          fi

      # ==================
      # 8. DEPLOYMENT
      # ==================
      - name: Archive and deploy
        run: |
          # Create versioned output
          REPORT_NAME="market-patterns-$(date +'%Y%m%d').html"
          cp reports/weekday-market-patterns.html "$REPORT_NAME"
          
          # Prepare GitHub Pages
          mkdir -p docs
          cp "$REPORT_NAME" docs/
          cp reports/weekday-market-patterns.html docs/index.html
          
          # Create build info
          echo "{
            \"build_date\": \"$(date)\",
            \"versions\": {
              \"ubuntu\": \"$(lsb_release -ds)\",
              \"r\": \"$(R --version | head -1)\",
              \"quarto\": \"$(quarto --version)\",
              \"glibc\": \"$(ldd --version | head -1)\"
            },
            \"parameters\": {
              \"data_days\": \"$DATA_DAYS\"
            }
          }" > docs/build_info.json

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          keep_files: true

      # ==================
      # 9. POST-BUILD
      # ==================
      - name: Create summary
        if: always()
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **R Version:** ${{ env.R_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quarto Version:** ${{ env.QUARTO_VERSION }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f reports/weekday-market-patterns.html ]; then
            echo "✅ **Successfully generated report**" >> $GITHUB_STEP_SUMMARY
            echo "- [View Live Report](https://${{ github.repository_owner }}.github.io/${{ github.repository_name }}/)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Report generation failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### System Information" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ldd --version | head -1 >> $GITHUB_STEP_SUMMARY
          R --version | head -1 >> $GITHUB_STEP_SUMMARY
          quarto --version >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
