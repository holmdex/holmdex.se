name: Biannual Market Patterns Report

on:
  schedule:
    - cron: '0 2 1 1,7 *'  # Runs Jan 1 and July 1 at 02:00 UTC
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all packages'
        required: false
        default: false
        type: boolean
      data_days:
        description: 'Number of days of market data to analyze'
        required: false
        default: '1826'  # 5 years
        type: string

permissions:
  contents: write
  packages: read

env:
  R_VERSION: '4.3.3'  # Latest stable
  QUARTO_VERSION: '1.7.30'
  R_LIBS_USER: ${{ github.workspace }}/r-libs
  CRAN_MIRROR: 'https://cloud.r-project.org'
  ALT_CRAN_MIRROR: 'https://cran.rstudio.com'
  TZ: UTC
  LC_ALL: en_US.UTF-8
  R_MAX_VSIZE: 8Gb
  R_MAX_NUM_THREADS: 4
  R_KEEP_PKG_SOURCE: yes
  DOWNLOAD_TIMEOUT: 600
  # GLIBC workaround - pin to Ubuntu 22.04 versions
  GLIBC_VERSION: '2.35'
  DISABLE_PACKAGEKIT: 'true'

jobs:
  generate-report:
    runs-on: ubuntu-22.04  # Must use 22.04 for GLIBC compatibility
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu-22.04, r: 'release'}

    steps:
      # ====================
      # 1. SYSTEM HARDENING
      # ====================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Disable problematic services
        run: |
          # Disable services that cause NEEDRESTART errors
          sudo systemctl mask packagekit.service
          sudo systemctl mask php8.1-fpm.service
          sudo systemctl daemon-reload

      - name: Verify GLIBC version
        run: |
          echo "Current GLIBC version: $(ldd --version | head -1)"
          if ! ldd --version | grep -q "${{ env.GLIBC_VERSION }}"; then
            echo "::error::GLIBC version mismatch! Required: ${{ env.GLIBC_VERSION }}"
            exit 1
          fi

      # ====================
      # 2. ENVIRONMENT SETUP
      # ====================
      - name: Setup system environment
        run: |
          echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          mkdir -p data/{cache,archive,figures}
          mkdir -p ${{ env.R_LIBS_USER }}
          
          # Verify system state
          lsb_release -a
          df -h
          ulimit -a

      # ==================
      # 3. DEPENDENCIES
      # ==================
      - name: Install system dependencies (pinned versions)
        run: |
          sudo apt-get update -y
          sudo apt-mark hold libc6 libc-bin  # Prevent GLIBC updates
          
          # Install pinned versions
          sudo apt-get install -y --no-install-recommends \
            build-essential=12.9ubuntu3 \
            libc6=2.35-0ubuntu3.6 \
            libcurl4-openssl-dev=7.81.0-1ubuntu1.15 \
            libssl-dev=3.0.2-0ubuntu1.12 \
            libxml2-dev=2.9.13+dfsg-1ubuntu0.4 \
            libfontconfig1-dev=2.13.1-4.2ubuntu5 \
            locales=2.35-0ubuntu3.6

          # Configure locales
          sudo locale-gen en_US.UTF-8

      # ==================
      # 4. R & QUARTO SETUP
      # ==================
      - name: Setup R (with version pinning)
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ env.R_VERSION }}
          use-public-rspm: false
          update-method: 'none'  # Prevent auto-updates

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup Quarto (with fallback)
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ env.QUARTO_VERSION }}
          # Fallback to manual install if action fails
          fallback-to-url: true

      # ==================
      # 5. LIBRARY PROTECTION
      # ==================
      - name: Create protected R library
        run: |
          # Create isolated library path
          mkdir -p ${{ env.R_LIBS_USER }}-protected
          echo "R_LIBS_USER=${{ env.R_LIBS_USER }}-protected" >> $GITHUB_ENV
          
          # Prevent system library contamination
          echo 'Sys.setenv(LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu")' >> .Rprofile

      # ==================
      # 6. PACKAGE INSTALL
      # ==================
      - name: Install R packages (safe mode)
        run: |
          Rscript -e '
          # Force binary packages to avoid compilation
          options(install.packages.compile.from.source = "never",
                  install.packages.check.source = "no")
          
          # Install with version checks
          safe_install <- function(pkg) {
            if (!requireNamespace(pkg, quietly = TRUE)) {
              message("Installing ", pkg)
              install.packages(pkg, repos = c(CRAN = Sys.getenv("CRAN_MIRROR")))
              
              # Verify installation
              if (!requireNamespace(pkg, quietly = TRUE)) {
                stop("Failed to install ", pkg)
              }
            }
          }
          
          # Core packages
          safe_install("dplyr")
          safe_install("remotes")
          
          # Verify critical dependencies
          if (as.numeric(version$major) < 4 || 
              as.numeric(version$minor) < 3.0) {
            stop("R version too old - requires >= 4.3.0")
          }
          '

      # ==================
      # 7. REPORT GENERATION
      # ==================
      - name: Render with stability checks
        run: |
          # Pre-flight checks
          Rscript -e '
          if (!file.exists("weekday-market-patterns.qmd")) {
            stop("Quarto file not found!")
          }
          
          # Verify critical packages
          required <- c("dplyr", "rlang", "knitr")
          missing <- setdiff(required, installed.packages())
          if (length(missing) > 0) stop("Missing packages: ", paste(missing, collapse=", "))
          '

          DATA_DAYS="${{ github.event.inputs.data_days || '1826' }}"
          
          # Render with forced binary packages
          quarto render weekday-market-patterns.qmd \
            --to html \
            --execute-params "days:$DATA_DAYS" \
            --no-execute-cache \
            --output-dir reports \
            --fail-on-warning

      # ==================
      # 8. OUTPUT VALIDATION
      # ==================
      - name: Validate output
        run: |
          if [ ! -f reports/weekday-market-patterns.html ]; then
            echo "::error::Report file not generated!"
            exit 1
          fi
          
          # Check for GLIBC-related strings in output
          if grep -q "GLIBC_" reports/weekday-market-patterns.html; then
            echo "::warning::Potential GLIBC reference in output"
          fi

      # ==================
      # 9. DEPLOYMENT
      # ==================
      - name: Archive and deploy
        run: |
          # Create versioned output
          REPORT_NAME="market-patterns-$(date +'%Y%m%d').html"
          cp reports/weekday-market-patterns.html "$REPORT_NAME"
          
          # Prepare GitHub Pages
          mkdir -p docs
          cp "$REPORT_NAME" docs/
          cp reports/weekday-market-patterns.html docs/index.html
          
          # Create system manifest
          echo "{
            \"system\": {
              \"glibc_version\": \"$(ldd --version | head -1 | cut -d' ' -f4)\",
              \"r_version\": \"$(R --version | head -1)\",
              \"quarto_version\": \"$(quarto --version)\"
            },
            \"build_date\": \"$(date)\"
          }" > docs/build_info.json

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          keep_files: true

      # ==================
      # 10. POST-BUILD CHECKS
      # ==================
      - name: Verify runtime environment
        if: always()
        run: |
          echo "=== Final System Check ==="
          ldd --version | head -1
          R --version | head -1
          quarto --version
          
          echo "=== Library Paths ==="
          Rscript -e '.libPaths()'
          
          echo "=== Critical Packages ==="
          Rscript -e '
          pkgs <- c("dplyr", "rlang", "knitr")
          versions <- sapply(pkgs, function(p) packageVersion(p))
          print(data.frame(Package = pkgs, Version = versions))
          '
