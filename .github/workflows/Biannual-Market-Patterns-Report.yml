name: Biannual Market Patterns Report

on:
  schedule:
    - cron: '0 0 1 1,7 *'  # Run on January 1st and July 1st
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  generate-report:
    runs-on: ubuntu-latest

    env:
      R_LIBS_USER: ${{ github.workspace }}/r-libs
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      TZ: UTC
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      R_CHECK_SYSTEM_CLOCK_: FALSE
      NOT_CRAN: true
      R_MAX_VSIZE: 32Gb
      R_MAX_NUM_THREADS: 4
      R_KEEP_PKG_SOURCE: yes
      DOWNLOAD_TIMEOUT: 1200
      R_MAX_RETRIES: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up environment variables
        run: |
          mkdir -p data
          echo "CACHE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "CACHE_WEEK=$(date +'%Y_%W')" >> $GITHUB_ENV
          echo "CACHE_MONTH=$(date +'%Y_%m')" >> $GITHUB_ENV

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential libcurl4-openssl-dev libssl-dev libxml2-dev \
            libfontconfig1-dev libfreetype6-dev libharfbuzz-dev libfribidi-dev \
            libpng-dev libtiff5-dev libjpeg-dev libudunits2-dev libgdal-dev \
            libgeos-dev libproj-dev pkg-config libv8-dev libsodium-dev \
            libcairo2-dev libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 \
            libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 \
            libxfixes3 libxrandr2 libgbm1 libpulse0 libasound2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Set up Pandoc and Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.3.450

      - name: Set up R package directories
        run: |
          mkdir -p ${{ env.R_LIBS_USER }}
          chmod -R 755 ${{ env.R_LIBS_USER }}

      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-pkg-${{ hashFiles('weekday-market-patterns.qmd') }}-${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ runner.os }}-r-pkg-${{ hashFiles('weekday-market-patterns.qmd') }}-
            ${{ runner.os }}-r-pkg-

      - name: Cache market data
        uses: actions/cache@v3
        with:
          path: data/
          key: market-data-${{ env.CACHE_DATE }}
          restore-keys: |
            market-data-${{ env.CACHE_WEEK }}-
            market-data-${{ env.CACHE_MONTH }}-
            market-data-

      - name: Create .Rprofile
        run: |
          cat > .Rprofile << 'EOF'
          options(
            repos = c(CRAN = "https://cloud.r-project.org"),
            timeout = 1200,
            connectionObserver = NULL,
            width = 120,
            scipen = 999,
            max.print = 1000,
            stringsAsFactors = FALSE
          )
          suppressPackageStartupMessages({
            if (requireNamespace("tidyverse", quietly = TRUE)) library(tidyverse)
          })
          EOF

      - name: Install R packages
        run: |
          pkgs=(remotes pak tidyverse ggplot2 dplyr tidyr readr purrr tibble stringr forcats \
                lubridate DT knitr rmarkdown jsonlite httr rvest xml2 curl \
                plotly htmlwidgets htmltools scales \
                quantmod TTR tidyquant RCurl)
          Rscript -e 'options(repos = c(CRAN = "https://cloud.r-project.org"))'
          for pkg in "${pkgs[@]}"; do
            echo "Installing $pkg"
            Rscript -e "tryCatch(install.packages('$pkg'), error=function(e) message(e))"
          done

      - name: Verify package installation
        run: |
          Rscript -e '
            pkgs <- c("tidyverse", "knitr", "rmarkdown", "plotly", "lubridate", "DT")
            missing <- pkgs[!pkgs %in% installed.packages()[,"Package"]]
            if(length(missing) > 0) {
              install.packages(missing)
              stop("Missing packages: ", paste(missing, collapse=", "))
            }
          '

      - name: Check QMD file
        run: |
          test -f weekday-market-patterns.qmd || { echo "QMD file missing"; exit 1; }
          echo "Number of R chunks: $(grep -c '```{r' weekday-market-patterns.qmd)"

      - name: Render with Quarto
        id: render
        continue-on-error: true
        run: |
          quarto render weekday-market-patterns.qmd --to html
          if [ ! -s weekday-market-patterns.html ]; then
            echo "render_success=false" >> $GITHUB_OUTPUT
          else
            echo "render_success=true" >> $GITHUB_OUTPUT
          fi

      - name: Manual R execution fallback
        if: steps.render.outputs.render_success != 'true'
        run: |
          mkdir -p extracted_code
          Rscript -e '
            qmd <- readLines("weekday-market-patterns.qmd")
            in_chunk <- FALSE; chunk_num <- 1; current_chunk <- character()
            for (line in qmd) {
              if (grepl("^```\\{r", line)) { in_chunk <- TRUE; current_chunk <- character() }
              else if (grepl("^```$", line)) {
                writeLines(current_chunk, sprintf("extracted_code/chunk_%02d.R", chunk_num))
                chunk_num <- chunk_num + 1; in_chunk <- FALSE
              } else if (in_chunk) current_chunk <- c(current_chunk, line)
            }
          '
          echo "source_dir <- 'extracted_code'; files <- list.files(source_dir, full.names = TRUE); for (f in files) { tryCatch(source(f), error=function(e) cat(sprintf(\"Error in %s: %s\n\", f, e$message))) }" > run_chunks.R
          Rscript run_chunks.R > r_execution_log.txt 2>&1

          cat << EOF > weekday-market-patterns.html
          <!DOCTYPE html>
          <html><head><title>Fallback Report</title></head>
          <body><h1>Report Render Failed</h1><pre>$(cat r_execution_log.txt)</pre></body></html>
          EOF

      - name: Save final report copy
        run: |
          cp weekday-market-patterns.html "market-patterns-report-$(date +'%Y-%m-%d').html"

      - name: Minify HTML (if possible)
        run: |
          npm install -g html-minifier || true
          if command -v html-minifier >/dev/null; then
            html-minifier --collapse-whitespace --remove-comments \
              --remove-optional-tags --remove-redundant-attributes \
              --remove-script-type-attributes --use-short-doctype \
              weekday-market-patterns.html -o weekday-market-patterns.html
          fi

      - name: Commit and push report
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update biannual market patterns report: $(date +'%Y-%m-%d')"

      - name: Upload logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            r_execution_log.txt
            extracted_code/
            *.html